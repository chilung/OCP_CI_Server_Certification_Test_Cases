#!/usr/bin/env python3
"""
Copyright (C) 2010-2013 by Cloud Computing Center for Mobile Applications
Industrial Technology Research Institute

File Name
  dcmi_power_reset
  Complete 20 power reset on SUT successfully using dcmitool out-of-band access

Authors
  Sophia Wu <Sophia.Wu@itri.org.tw>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License version 3,
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

from argparse import (
    ArgumentParser,
    RawTextHelpFormatter
)

import sys
import configparser
import shlex
import subprocess
import ast
import time
from subprocess import (
    check_output,
    CalledProcessError
)

def run(host_ip, user, password):
    cmd = 'dcmitool -H {} -U {} -P {} power reset'.format(host_ip, user, password)
    power_reset_return = check_output(shlex.split(cmd), universal_newlines=True)
    return power_reset_return
        
def dcmi_reset_oob(args):

    #DCMI config file
    DEFAULT_CFG = "/etc/checkbox.d/me.cfg"
    if not "config" in vars(args):
        config_file = DEFAULT_CFG
    else:
        config_file = args.config

    config = configparser.RawConfigParser()
    try:
        config.readfp(open(config_file))
    except IOError:
        print("No config file found")
        return 1

    try:
        targets_options = config.options('Targets')
        targets_list = []
        for target_key in targets_options:
            targets_list.append(config.get('Targets', target_key))
        if not targets_list:
            print("Invalid or Empty targets")
            return 2
    except configparser.Error:
        print("Invalid or Empty targets")
        return 2

    try:
        user_value = config.get("Account", "USER")
        password_value = config.get("Account", "PASSWORD")
    except configparser.NoOptionError:
        print("Invalid or Empty credential info")
        return 3

    ping_flag = 0
    for tg in targets_list:    

        if not tg or not user_value or not password_value:
            print("Require Taget IP, Account(USER/PASSWORD) for DCMI out-of-band access")
            return 4
        else:
            print("SUT =", tg)
            print("USER =", user_value)
            print("PASSWORD =", password_value)

            for n in range(20):
                print("---------------- %s ----------------" % n)
                count = 0
                while count < 10:
                    print("+++++++++++ %s ++++++++++++" % count)
                    ping_cmd = 'ping -c 1 {}>/dev/null 2>/dev/null'.format(tg)
                    ping_rtn = subprocess.call(ping_cmd, shell=True)

                    if ping_rtn == 0:
                        print("Destination Host Reachable")

                        try:
                            power_control = run(tg, user_value, password_value)
                            print(power_control)
                        except CalledProcessError as dcmi_exception:
                            print("Failed executing dcmi, Reason: %s" % dcmi_exception)
                            return 6

                        time.sleep(30)
                        break
                    else:
                        time.sleep(10)
                        count = count+1
                        print("Destination Host Unreachable")
                
                if count == 10:
                    print("Host Has No Response, End of Test")
                    ping_flag = 100

    if ping_flag == 100:
        return 100
    return 0

def main():

    intro_message = "Default config location is /etc/checkbox.d/me.cfg"
    parser = ArgumentParser(description=intro_message,
                            formatter_class=RawTextHelpFormatter)
    parser.add_argument('--config',
                        default="/etc/checkbox.d/me.cfg",
                        help="Supply config file for getting authentication info")
    args = parser.parse_args()
    return dcmi_reset_oob(args)

if __name__ == "__main__":
    sys.exit(main())
