#!/usr/bin/env python3
"""
Copyright (C) 2010-2013 by Cloud Computing Center for Mobile Applications
Industrial Technology Research Institute

It is NOT YET officially approved by OCP.

memory_info
  1. Use lshw command to gather memory information.
  2. Testing prerequisites:
     4 channels DDR3 registered memory interface on each processor 0 
     and processor 1.
     2 DDR3 slots per channel per processor. (total of 16 DIMMs 
                                              on the motherboard)
  3. The program will output memory module, vendor, size and slot.
  4. Criteria: Total of 16 DIMMs on the motherboard.

Authors
  Nelson Chu <Nelson.Chu@itri.org.tw>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License version 3,
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

import sys
import xml.etree.ElementTree as ET
from subprocess import Popen, PIPE

def main():
    attribute = ['description', 'vendor', 'slot', 'size']
    command = 'lshw -xml'
    hwinfo_xml = Popen(command, stdout=PIPE, stderr=PIPE,
                       shell=True).communicate()[0]
    root = ET.fromstring(hwinfo_xml)

    # Parse lshw XML for gathering memory information.
    memory_list = root.findall(".//clock/..[@class='memory']")

    if not memory_list:
        print("Fail: Cannot parse any memory information.", file=sys.stderr)
        return 10

    count = 0
    for dimm in memory_list:
        count = count +1
        for attr in attribute:
            if dimm.find(attr) is None:
                print(("Fail: Cannot find memory %s") %attr, file=sys.stderr)
                return 20

        memory_size = int(dimm.find('size').text) / (1024**3)
        for attr in attribute:
            if attr == 'description':
                print('%s' %(dimm.find(attr).text), end=" ")
                continue
            elif attr == 'size':
                print('%s=%dGB.' %(attr, memory_size))
                continue
            print('%s=%s' %(attr, dimm.find(attr).text), end=" ")

    print("Total number of DIMMs is %s." %(count))
    if count != 16:
        print("Fail: Memory DIMM number is not meet the requirement.",
        file=sys.stderr)
        return 30

    return 0

if __name__ == '__main__':
    sys.exit(main())
